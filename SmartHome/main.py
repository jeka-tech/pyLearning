import threading
import time
from threading import Thread
from kivy.clock import Clock
from kivy.app import App
from kivy.uix.tabbedpanel import TabbedPanel
from kivy.lang import Builder
from kivy.properties import StringProperty
import myServer
from bs4 import BeautifulSoup
import requests

import cv2
cap = cv2.VideoCapture('rtsp://admin:@192.168.0.111/1')

temp_01 = 0.0

Builder.load_string("""

<Test>:
    do_default_tab: False
    
    TabbedPanelItem:
        text: '–ü–∞–Ω–µ–ª—å'

        GridLayout:
            height: 1000
            cols: 2

            
            BoxLayout: 
                padding: 10
                canvas.before:
                    Color:
                        rgba: 39/255, 204/255, 245/255, 1
                    Line:
                        width: 1
                        rectangle: self.x, self.y, self.width, self.height
                
                GridLayout:
                    cols: 4
                    spacing: 10
                    Label:
                        text: '–ö–∞–±–∏–Ω–µ—Ç'
                    ToggleButton:
                        id: cab_1
                        text: '–°–≤–µ—Ç 1'
                    ToggleButton:
                        id: cab_2
                        text: '–°–≤–µ—Ç 2'
                    Label:
                    
                    Label:
                        text: '–î–µ—Ç—Å–∫–∞—è'
                    ToggleButton:
                        id: det_1
                        text: '–°–≤–µ—Ç 1'
                    ToggleButton:
                        id: det_2
                        text: '–°–≤–µ—Ç 2'
                    Label:
                    
                    Label:
                        text: '–ó–∞–ª'
                    ToggleButton:
                        id: zal_1
                        text: '–°–≤–µ—Ç 1'
                    ToggleButton:
                        id: zal_2
                        text: '–°–≤–µ—Ç 2'
                    Label:
                    
                    Label:
                        text: '–ö—É—Ö–Ω—è'
                    ToggleButton:
                        id: kuh_1
                        text: '–°–≤–µ—Ç 1'
                    ToggleButton:
                        id: kuh_2
                        text: '–°–≤–µ—Ç 2'
                    Label:
                        id: lab1
                        text: 'woooooh' if kuh_1.state == 'down' else ''
                    
                    Label:
                        text: '–í–∞–Ω–Ω–∞—è'
                    ToggleButton:
                        text: '–°–≤–µ—Ç'
                    ToggleButton:
                        text: '–ü–æ–ª'
                    ToggleButton:
                        text: '–í–µ–Ω—Ç.'
                    
                    Label:
                        text: '–¢—É–∞–ª–µ—Ç'
                    ToggleButton:
                        text: '–°–≤–µ—Ç'
                    ToggleButton:
                        text: '–ü–æ–ª'
                    ToggleButton:
                        text: '–í–µ–Ω—Ç.'
                    
                    Label:
                        text: '–ö–æ—Ä–∏–¥–æ—Ä'
                    ToggleButton:
                        text: '–°–≤–µ—Ç'
                    Label:
                    Label:
                    
                    Label:
                        text: '–ü—Ä–∞—á–µ—á–Ω–∞—è'
                    ToggleButton:
                        text: '–°–≤–µ—Ç'
                    ToggleButton:
                        text: '–£—Ç—é–≥'
                    Label:
                    
            
            BoxLayout:
                size_hint: .6, 1
                orientation: 'vertical'
                padding: 10
                spacing: 10
                canvas.before:
                    Color:
                        rgba: 39/255, 204/255, 245/255, 1
                    Line:
                        width: 1
                        rectangle: self.x, self.y, self.width, self.height
                
                  
                # Label:
                #     font_name: 'seguiemj'
                #     text: "üå∂Ô∏è"     
                Button:
                    size_hint: 1, .15
                    text: '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:'
                    on_release: root.manual_update_forecast()
                
                Label:
                    text_size: self.size
                    valign: 'top'
                    text: root.forecast    
                        
                GridLayout:
                    cols: 2
                    Label:
                        halign: 'center'
                        text: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\\n–Ω–∞ —É–ª–∏—Ü–µ'
                    Label:
                        text: root.streetTemp
                    
                    Label:
                        halign: 'center'
                        text: '–í–ª–∞–∂–Ω–æ—Å—Ç—å\\n–Ω–∞ —É–ª–∏—Ü–µ'
                    Label:
                        text: root.streetHum
                    
                    Label:
                        halign: 'center'
                        text: '–ê—Ç–º.\\n–¥–∞–≤–ª–µ–Ω–∏–µ'
                    Label:
                        text: '755'
            
                    
    TabbedPanelItem:
        text: '–í–∏–¥–µ–æ'
        BoxLayout:
            orientation: 'vertical'
            ToggleButton:
                text: 'Male'
                group: 'sex'
            Switch:
                active: True
            Label:
                text: 'Second tab content area'
            Button:
                text: 'Button that does nothing'
    TabbedPanelItem:
        text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        BoxLayout:
            orientation: 'vertical'
            Button:
                text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä'
                on_press: root.manage_server('Start server')
            Button:
                text: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä'
                on_press: root.manage_server('Stop server')
            Label:
                text: root.serverStatus

""")


class Test(TabbedPanel):
    streetTemp = StringProperty()
    streetHum = StringProperty()
    forecast = StringProperty()
    serverStatus = StringProperty()
    def __init__(self, **kwargs):
        super(Test, self).__init__(**kwargs)

        self.thread_1 = Thread(target=myServer.serv_forever, daemon=True)
        self.thread_2 = Thread(target=self.update_variables, daemon=True)
        self.thread_3 = Thread(target=self.update_forecast, daemon=True)
        self.thread_1.start()
        self.thread_2.start()
        self.thread_3.start()
    def manage_server(self, instance):

        if instance == 'Start server':
            myServer.serv_key = True
            print(threading.enumerate())
            self.serverStatus = f"The server is running {myServer.serv_key}"

        elif instance == 'Stop server':
            myServer.serv_key = False
            self.serverStatus = f"The server is running {myServer.serv_key}"

    def manual_update_forecast(self):
        try:
            page = requests.get('https://rp5.ru/–ü–æ–≥–æ–¥–∞_–≤_–°–∞–º–∞—Ä–µ,_–°–∞–º–∞—Ä—Å–∫–∞—è_–æ–±–ª–∞—Å—Ç—å')
            soup = BeautifulSoup(page.text, "html.parser")
            temp = soup.find('div', id='forecastShort-content')
            for match in temp.findAll('span', class_="t_1"):
                match.clear()
            self.forecast = temp.text[1:]
        except Exception as err:
            print(err)
            self.forecast = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã'

    def update_forecast(self):
        while True:
            try:
                page = requests.get('https://rp5.ru/–ü–æ–≥–æ–¥–∞_–≤_–°–∞–º–∞—Ä–µ,_–°–∞–º–∞—Ä—Å–∫–∞—è_–æ–±–ª–∞—Å—Ç—å')
                soup = BeautifulSoup(page.text, "html.parser")
                temp = soup.find('div', id='forecastShort-content')

                for match in temp.findAll('span', class_="t_1"):
                    match.clear()

                self.forecast = temp.text[1:]
            except Exception as err:
                print(err)
                self.forecast = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã'
            time.sleep(3600)
    def update_variables(self):
        while True:
            self.streetTemp = f'{myServer.temp_01:.1f}'
            self.streetHum = f'{myServer.hum_01:.1f}'
            time.sleep(1)
class TabbedPanelApp(App):

    def build(self):
        return Test()



if __name__ == '__main__':
    TabbedPanelApp().run()